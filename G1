I'll add the Many-to-Many Mapping between Employee and Project and provide the full updated code.


---

1️⃣ Updated Employee Entity (Many-to-Many with Project):

package com.example.mappings.entity;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "employee")
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private int id;

    @Column(name = "name")
    private String name;

    @Column(name = "email")
    private String email;

    @ElementCollection
    @CollectionTable(name = "employee_skills", joinColumns = @JoinColumn(name = "employee_id"))
    @Column(name = "skill")
    private Set<String> skills = new HashSet<>();

    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<EmploymentHistory> employmentHistories;

    @Embedded
    private Address address;

    @ManyToMany
    @JoinTable(
        name = "employee_project",
        joinColumns = @JoinColumn(name = "employee_id"),
        inverseJoinColumns = @JoinColumn(name = "project_id")
    )
    private Set<Project> projects = new HashSet<>();

    public Employee() {
    }

    public Employee(String name, String email, Set<String> skills, List<EmploymentHistory> employmentHistories, Address address, Set<Project> projects) {
        this.name = name;
        this.email = email;
        this.skills = skills;
        this.employmentHistories = employmentHistories;
        this.address = address;
        this.projects = projects;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Set<String> getSkills() {
        return skills;
    }

    public void setSkills(Set<String> skills) {
        this.skills = skills;
    }

    public List<EmploymentHistory> getEmploymentHistories() {
        return employmentHistories;
    }

    public void setEmploymentHistories(List<EmploymentHistory> employmentHistories) {
        this.employmentHistories = employmentHistories;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public Set<Project> getProjects() {
        return projects;
    }

    public void setProjects(Set<Project> projects) {
        this.projects = projects;
    }

    @Override
    public String toString() {
        return "Employee{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", skills=" + skills +
                ", employmentHistories=" + employmentHistories +
                ", address=" + address +
                ", projects=" + projects +
                '}';
    }
}


---

2️⃣ New Project Entity (Many-to-Many with Employee):

package com.example.mappings.entity;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "project")
public class Project {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private int id;

    @Column(name = "project_name")
    private String projectName;

    @ManyToMany(mappedBy = "projects")
    private Set<Employee> employees = new HashSet<>();

    public Project() {
    }

    public Project(String projectName) {
        this.projectName = projectName;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getProjectName() {
        return projectName;
    }

    public void setProjectName(String projectName) {
        this.projectName = projectName;
    }

    public Set<Employee> getEmployees() {
        return employees;
    }

    public void setEmployees(Set<Employee> employees) {
        this.employees = employees;
    }

    @Override
    public String toString() {
        return "Project{" +
                "id=" + id +
                ", projectName='" + projectName + '\'' +
                '}';
    }
}


---

3️⃣ Updated schema.sql for Many-to-Many Table

Modify your schema.sql file to include the employee_project table:

CREATE TABLE employee (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    email VARCHAR(50),
    city VARCHAR(50),
    state VARCHAR(50),
    pin_code INT
);

CREATE TABLE employee_skills(
    employee_id INT REFERENCES employee(id),
    skill VARCHAR(50)
);

CREATE TABLE employment_history(
    id INT PRIMARY KEY AUTO_INCREMENT,
    componey_name VARCHAR(50),
    experience INT,
    job_title VARCHAR(50),
    employee_id INT,
    FOREIGN KEY (employee_id) REFERENCES employee(id)
);

CREATE TABLE project (
    id INT PRIMARY KEY AUTO_INCREMENT,
    project_name VARCHAR(50)
);

CREATE TABLE employee_project (
    employee_id INT,
    project_id INT,
    PRIMARY KEY (employee_id, project_id),
    FOREIGN KEY (employee_id) REFERENCES employee(id),
    FOREIGN KEY (project_id) REFERENCES project(id)
);


---

4️⃣ JSON Input Example (Including Projects)

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "skills": ["Java", "Spring Boot", "SQL"],
  "employmentHistories": [
    {
      "companyName": "TechCorp",
      "jobTitle": "Software Engineer",
      "yearsOfExperience": 3
    },
    {
      "companyName": "InnoSoft",
      "jobTitle": "Senior Developer",
      "yearsOfExperience": 5
    }
  ],
  "address": {
    "street": "123 Main St",
    "city": "New York",
    "state": "NY",
    "zipCode": "10001"
  },
  "projects": [
    {
      "projectName": "E-Commerce App"
    },
    {
      "projectName": "Banking System"
    }
  ]
}


---

Final Updates Summary:

✅ Added Many-to-Many Mapping between Employee and Project.
✅ Updated schema.sql to create the employee_project table.
✅ Provided JSON input example including projects.

Now everything should be set up! Let me know if you need any modifications.

