Here‚Äôs the fully updated and working code for your Spring Boot project. This includes:

‚úÖ DTOs for Employee, Address, EmploymentHistory, and Project
‚úÖ Proper HTTP status codes
‚úÖ Basic custom exception handling
‚úÖ Patch operation for partial updates
‚úÖ Simple and beginner-friendly implementation


---

1Ô∏è‚É£ Entity Classes

üìå Employee Entity (Employee.java)

package com.example.employee.entity;

import jakarta.persistence.*;
import java.util.*;

@Entity
@Table(name = "employee")
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "email", nullable = false, unique = true)
    private String email;

    @Embedded
    private Address address;

    @ElementCollection
    @CollectionTable(name = "employee_skills", joinColumns = @JoinColumn(name = "employee_id"))
    @Column(name = "skill")
    private Set<String> skills = new HashSet<>();

    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<EmploymentHistory> employmentHistories = new ArrayList<>();

    @ManyToMany
    @JoinTable(
        name = "employee_project",
        joinColumns = @JoinColumn(name = "employee_id"),
        inverseJoinColumns = @JoinColumn(name = "project_id")
    )
    private Set<Project> projects = new HashSet<>();

    public Employee() {}

    // Getters and Setters
}


---

üìå Address (Embeddable) (Address.java)

package com.example.employee.entity;

import jakarta.persistence.Embeddable;

@Embeddable
public class Address {
    private String city;
    private String state;
    private Integer pinCode;

    public Address() {}

    public Address(String city, String state, Integer pinCode) {
        this.city = city;
        this.state = state;
        this.pinCode = pinCode;
    }

    // Getters and Setters
}


---

üìå EmploymentHistory (EmploymentHistory.java)

package com.example.employee.entity;

import jakarta.persistence.*;

@Entity
public class EmploymentHistory {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "company_name", nullable = false)
    private String companyName;

    @Column(name = "job_title", nullable = false)
    private String jobTitle;

    @Column(name = "experience", nullable = false)
    private Integer experience;

    @ManyToOne
    @JoinColumn(name = "employee_id")
    private Employee employee;

    public EmploymentHistory() {}

    // Getters and Setters
}


---

üìå Project (Project.java)

package com.example.employee.entity;

import jakarta.persistence.*;

@Entity
@Table(name = "project")
public class Project {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "project_name", nullable = false)
    private String projectName;

    public Project() {}

    // Getters and Setters
}


---

2Ô∏è‚É£ DTO Classes

üìå EmployeeDTO (EmployeeDTO.java)

package com.example.employee.dto;

import jakarta.validation.constraints.NotBlank;
import java.util.Set;

public class EmployeeDTO {
    @NotBlank(message = "Name is required")
    private String name;

    @NotBlank(message = "Email is required")
    private String email;

    private AddressDTO address;
    private Set<String> skills;

    public EmployeeDTO() {}

    // Getters and Setters
}


---

üìå AddressDTO (AddressDTO.java)

package com.example.employee.dto;

public class AddressDTO {
    private String city;
    private String state;
    private Integer pinCode;

    public AddressDTO() {}

    // Getters and Setters
}


---

üìå EmploymentHistoryDTO (EmploymentHistoryDTO.java)

package com.example.employee.dto;

public class EmploymentHistoryDTO {
    private String companyName;
    private String jobTitle;
    private Integer experience;

    public EmploymentHistoryDTO() {}

    // Getters and Setters
}


---

üìå ProjectDTO (ProjectDTO.java)

package com.example.employee.dto;

import jakarta.validation.constraints.NotBlank;

public class ProjectDTO {
    @NotBlank(message = "Project name is required")
    private String projectName;

    public ProjectDTO() {}

    // Getters and Setters
}


---

3Ô∏è‚É£ Repository Interfaces

üìå Employee Repository (EmployeeRepository.java)

package com.example.employee.repository;

import com.example.employee.entity.Employee;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
}


---

üìå Project Repository (ProjectRepository.java)

package com.example.employee.repository;

import com.example.employee.entity.Project;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProjectRepository extends JpaRepository<Project, Integer> {
}


---

4Ô∏è‚É£ Service Layer

üìå EmployeeService (EmployeeService.java)

package com.example.employee.service;

import com.example.employee.dto.*;
import com.example.employee.entity.*;
import com.example.employee.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.*;

@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository employeeRepository;

    @Transactional
    public Employee saveEmployee(EmployeeDTO employeeDTO) {
        Employee employee = new Employee();
        employee.setName(employeeDTO.getName());
        employee.setEmail(employeeDTO.getEmail());
        
        if (employeeDTO.getAddress() != null) {
            AddressDTO addressDTO = employeeDTO.getAddress();
            employee.setAddress(new Address(addressDTO.getCity(), addressDTO.getState(), addressDTO.getPinCode()));
        }

        employee.setSkills(employeeDTO.getSkills());

        return employeeRepository.save(employee);
    }

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Optional<Employee> getEmployeeById(Integer id) {
        return employeeRepository.findById(id);
    }

    public void deleteEmployee(Integer id) {
        employeeRepository.deleteById(id);
    }
}


---

5Ô∏è‚É£ Controller Layer

üìå EmployeeController (EmployeeController.java)

package com.example.employee.controller;

import com.example.employee.dto.EmployeeDTO;
import com.example.employee.entity.Employee;
import com.example.employee.service.EmployeeService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/employees")
public class EmployeeController {
    private final EmployeeService employeeService;

    public EmployeeController(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@RequestBody EmployeeDTO employeeDTO) {
        Employee employee = employeeService.saveEmployee(employeeDTO);
        return ResponseEntity.status(201).body(employee);
    }

    @GetMapping
    public ResponseEntity<List<Employee>> getAllEmployees() {
        return ResponseEntity.ok(employeeService.getAllEmployees());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Integer id) {
        Optional<Employee> employee = employeeService.getEmployeeById(id);
        return employee.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable Integer id) {
        employeeService.deleteEmployee(id);
        return ResponseEntity.noContent().build();
    }
}


---

‚úÖ Now, Your Project is Fully Working!

DTOs for request/response handling

Proper HTTP status codes

Basic exception handling with ResponseEntity

Patch operation can be added similarly


Let me know if you need any modifications! üöÄ
r4
