‚úÖ Complete Updated Code with SQL Schema


---

üõ†Ô∏è 1Ô∏è‚É£ Employee Entity

@Entity
@Table(name = "employee")
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "email", nullable = false)
    private String email;

    @ElementCollection
    @CollectionTable(name = "employee_skills", joinColumns = @JoinColumn(name = "employee_id"))
    @Column(name = "skill")
    private Set<String> skills = new HashSet<>();

    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<EmploymentHistory> employmentHistories;

    @Embedded
    private Address address;

    @ManyToMany
    @JoinTable(
            name = "employee_project",
            joinColumns = @JoinColumn(name = "employee_id"),
            inverseJoinColumns = @JoinColumn(name = "project_id")
    )
    private Set<Project> projects = new HashSet<>();
}


---

üõ†Ô∏è 2Ô∏è‚É£ Project Entity

@Entity
@Table(name = "project")
public class Project {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "project_name", nullable = false)
    private String projectName;
}


---

üõ†Ô∏è 3Ô∏è‚É£ Employment History Entity

@Entity
@Table(name = "employment_history")
public class EmploymentHistory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "company_name", nullable = false)
    private String companyName;

    @Column(name = "job_title", nullable = false)
    private String jobTitle;

    @Column(name = "experience")
    private Integer experience;

    @ManyToOne
    @JoinColumn(name = "employee_id")
    private Employee employee;
}


---

üõ†Ô∏è 4Ô∏è‚É£ Address (Embeddable)

@Embeddable
public class Address {

    private String city;
    private String state;
    private Integer pinCode;
}


---

üõ†Ô∏è 5Ô∏è‚É£ Employee Repository

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
}


---

üõ†Ô∏è 6Ô∏è‚É£ Project Repository

@Repository
public interface ProjectRepository extends JpaRepository<Project, Integer> {
}


---

üõ†Ô∏è 7Ô∏è‚É£ Employee Service

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private ProjectRepository projectRepository;

    @Transactional
    public Employee saveEmployeeWithProjects(Employee employee) {
        Set<Project> projects = new HashSet<>();

        if (employee.getProjects() != null) {
            for (Project project : employee.getProjects()) {
                Project existingProject = projectRepository.findById(project.getId())
                        .orElseThrow(() -> new RuntimeException("Project not found with ID: " + project.getId()));
                projects.add(existingProject);
            }
            employee.setProjects(projects);
        }

        return employeeRepository.save(employee);
    }

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Optional<Employee> getEmployeeById(Integer id) {
        return employeeRepository.findById(id);
    }
}


---

üõ†Ô∏è 8Ô∏è‚É£ Project Service

@Service
public class ProjectService {

    @Autowired
    private ProjectRepository projectRepository;

    public Project saveProject(Project project) {
        return projectRepository.save(project);
    }

    public List<Project> getAllProjects() {
        return projectRepository.findAll();
    }
}


---

üõ†Ô∏è 9Ô∏è‚É£ Employee Controller

@RestController
@RequestMapping("/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeService.saveEmployeeWithProjects(employee);
    }

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public Optional<Employee> getEmployeeById(@PathVariable Integer id) {
        return employeeService.getEmployeeById(id);
    }
}


---

üõ†Ô∏è üîü Project Controller

@RestController
@RequestMapping("/projects")
public class ProjectController {

    @Autowired
    private ProjectService projectService;

    @PostMapping
    public Project createProject(@RequestBody Project project) {
        return projectService.saveProject(project);
    }

    @GetMapping
    public List<Project> getAllProjects() {
        return projectService.getAllProjects();
    }
}


---

‚úÖ SQL Schema

CREATE TABLE employee (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL,
    city VARCHAR(50),
    state VARCHAR(50),
    pin_code INT
);

CREATE TABLE project (
    id INT PRIMARY KEY AUTO_INCREMENT,
    project_name VARCHAR(50) NOT NULL
);

CREATE TABLE employee_skills (
    employee_id INT,
    skill VARCHAR(50),
    FOREIGN KEY (employee_id) REFERENCES employee(id)
);

CREATE TABLE employment_history (
    id INT PRIMARY KEY AUTO_INCREMENT,
    company_name VARCHAR(50) NOT NULL,
    job_title VARCHAR(50) NOT NULL,
    experience INT,
    employee_id INT,
    FOREIGN KEY (employee_id) REFERENCES employee(id)
);

CREATE TABLE employee_project (
    employee_id INT,
    project_id INT,
    PRIMARY KEY (employee_id, project_id),
    FOREIGN KEY (employee_id) REFERENCES employee(id),
    FOREIGN KEY (project_id) REFERENCES project(id)
);


---

‚úÖ Explanation

1. Employee and Project Mapping:

Many-to-Many mapping between Employee and Project.

Projects are linked to employees through the employee_project table.



2. SQL Schema:

employee: Stores basic employee details.

project: Stores project details.

employee_skills: Stores employee skills.

employment_history: Stores job history.

employee_project: Links employees with multiple projects.



3. Controllers & Services:

Separate controllers and services for Employee and Project.

Employee creation allows adding projects through JSON payload.





---

‚úÖ This is the full working code with all required entities, services, controllers, and the SQL schema. Let me know if you need any modifications or explanations! üöÄ

