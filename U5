✅ Updated Project with Mappings in DTO Classes Only


---

💡 Key Changes

1. Mappings moved to DTO classes: All DTO-to-Entity and Entity-to-DTO mappings are handled inside the DTO classes.


2. Cleaner Service Layer: The service layer is simplified—no mapping code in the service class.


3. Easy-to-read and maintainable code.




---

✅ Updated Project Structure

src/main/java/org/example
 ├── controller
 │      ├── EmployeeController.java
 │      ├── ProjectController.java
 │
 ├── service
 │      ├── EmployeeService.java
 │      ├── ProjectService.java
 │
 ├── repository
 │      ├── EmployeeRepository.java
 │      ├── ProjectRepository.java
 │
 ├── entity
 │      ├── Employee.java
 │      ├── Project.java
 │      ├── Address.java
 │      ├── EmploymentHistory.java
 │
 ├── dto
 │      ├── EmployeeDTO.java
 │      ├── AddressDTO.java
 │      ├── EmploymentHistoryDTO.java
 │      ├── ProjectDTO.java
 │
 └── SpringBootApp.java


---

✅ 1️⃣ DTO Classes with Mappings


---

📌 EmployeeDTO

package org.example.dto;

import lombok.Data;
import org.example.entity.Employee;
import org.example.entity.Project;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Data
public class EmployeeDTO {
    private Integer id;
    private String name;
    private String email;
    private Set<String> skills;
    private AddressDTO address;
    private List<EmploymentHistoryDTO> employmentHistories;
    private List<Integer> projectIds;

    // Convert DTO to Entity
    public Employee toEntity(List<Project> projects) {
        Employee employee = new Employee();
        employee.setId(this.id);
        employee.setName(this.name);
        employee.setEmail(this.email);
        employee.setSkills(this.skills);

        if (this.address != null) {
            employee.setAddress(this.address.toEntity());
        }

        if (this.employmentHistories != null) {
            employee.setEmploymentHistories(
                    this.employmentHistories.stream()
                            .map(EmploymentHistoryDTO::toEntity)
                            .collect(Collectors.toList())
            );
        }

        employee.setProjects(projects.stream().collect(Collectors.toSet()));

        return employee;
    }

    // Convert Entity to DTO
    public static EmployeeDTO fromEntity(Employee employee) {
        EmployeeDTO dto = new EmployeeDTO();
        dto.setId(employee.getId());
        dto.setName(employee.getName());
        dto.setEmail(employee.getEmail());
        dto.setSkills(employee.getSkills());

        if (employee.getAddress() != null) {
            dto.setAddress(AddressDTO.fromEntity(employee.getAddress()));
        }

        if (employee.getEmploymentHistories() != null) {
            dto.setEmploymentHistories(
                    employee.getEmploymentHistories().stream()
                            .map(EmploymentHistoryDTO::fromEntity)
                            .collect(Collectors.toList())
            );
        }

        dto.setProjectIds(
                employee.getProjects().stream()
                        .map(Project::getId)
                        .collect(Collectors.toList())
        );

        return dto;
    }
}


---

📌 AddressDTO

package org.example.dto;

import lombok.Data;
import org.example.entity.Address;

@Data
public class AddressDTO {
    private String city;
    private String state;
    private Integer pinCode;

    // DTO to Entity
    public Address toEntity() {
        Address address = new Address();
        address.setCity(this.city);
        address.setState(this.state);
        address.setPinCode(this.pinCode);
        return address;
    }

    // Entity to DTO
    public static AddressDTO fromEntity(Address address) {
        AddressDTO dto = new AddressDTO();
        dto.setCity(address.getCity());
        dto.setState(address.getState());
        dto.setPinCode(address.getPinCode());
        return dto;
    }
}


---

📌 EmploymentHistoryDTO

package org.example.dto;

import lombok.Data;
import org.example.entity.EmploymentHistory;

@Data
public class EmploymentHistoryDTO {
    private String companyName;
    private String jobTitle;
    private Integer experience;

    // DTO to Entity
    public EmploymentHistory toEntity() {
        EmploymentHistory history = new EmploymentHistory();
        history.setCompanyName(this.companyName);
        history.setJobTitle(this.jobTitle);
        history.setExperience(this.experience);
        return history;
    }

    // Entity to DTO
    public static EmploymentHistoryDTO fromEntity(EmploymentHistory history) {
        EmploymentHistoryDTO dto = new EmploymentHistoryDTO();
        dto.setCompanyName(history.getCompanyName());
        dto.setJobTitle(history.getJobTitle());
        dto.setExperience(history.getExperience());
        return dto;
    }
}


---

📌 ProjectDTO

package org.example.dto;

import lombok.Data;
import org.example.entity.Project;

@Data
public class ProjectDTO {
    private Integer id;
    private String projectName;

    // DTO to Entity
    public Project toEntity() {
        Project project = new Project();
        project.setId(this.id);
        project.setProjectName(this.projectName);
        return project;
    }

    // Entity to DTO
    public static ProjectDTO fromEntity(Project project) {
        ProjectDTO dto = new ProjectDTO();
        dto.setId(project.getId());
        dto.setProjectName(project.getProjectName());
        return dto;
    }
}


---

✅ 2️⃣ Simplified Service Layer


---

📌 EmployeeService.java

package org.example.service;

import org.example.dto.EmployeeDTO;
import org.example.entity.Employee;
import org.example.entity.Project;
import org.example.repository.EmployeeRepository;
import org.example.repository.ProjectRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private ProjectRepository projectRepository;

    @Transactional
    public EmployeeDTO saveEmployeeWithProjects(EmployeeDTO dto) {
        List<Project> projects = projectRepository.findAllById(dto.getProjectIds());
        
        Employee employee = dto.toEntity(projects);
        Employee savedEmployee = employeeRepository.save(employee);
        
        return EmployeeDTO.fromEntity(savedEmployee);
    }

    public List<EmployeeDTO> getAllEmployees() {
        List<Employee> employees = employeeRepository.findAll();
        return employees.stream().map(EmployeeDTO::fromEntity).toList();
    }

    public EmployeeDTO getEmployeeById(Integer id) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found with ID: " + id));
        return EmployeeDTO.fromEntity(employee);
    }
}


---

✅ 3️⃣ Updated Controller


---

📌 EmployeeController.java

package org.example.controller;

import org.example.dto.EmployeeDTO;
import org.example.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @PostMapping
    public EmployeeDTO createEmployee(@RequestBody EmployeeDTO dto) {
        return employeeService.saveEmployeeWithProjects(dto);
    }

    @GetMapping
    public List<EmployeeDTO> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public EmployeeDTO getEmployeeById(@PathVariable Integer id) {
        return employeeService.getEmployeeById(id);
    }
}


---

✅ 4️⃣ JSON Input and Output


---

📥 JSON Input:

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "skills": ["Java", "Spring Boot"],
  "employmentHistories": [
    {
      "companyName": "TechCorp",
      "jobTitle": "Software Engineer",
      "experience": 3
    }
  ],
  "address": {
    "city": "Hyderabad",
    "state": "Telangana",
    "pinCode": 500032
  },
  "projectIds": [1, 2]
}


---

📥 JSON Output:

{
  "id": 1,
  "name": "John Doe",
  "email": "john.doe@example.com",
  "skills": ["Java", "Spring Boot"],
  "employmentHistories": [
    {
      "companyName": "TechCorp",
      "jobTitle": "Software Engineer",
      "experience": 3
    }
  ],
  "projectIds": [1, 2]
}


---

✅ This is the clean and simplified version with all mappings inside DTO classes only. Let me know if you need any further modifications! 🚀

